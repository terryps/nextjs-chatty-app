// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id   @default(autoincrement())
  username          String      @unique   @db.VarChar(40)
  fullname          String?     @db.VarChar(40)
  avatarUrl         String?
  about             String?     @db.VarChar(80)
  password          String
  chatLikes         ChatLike[]
  chats             Chat[]
  participant1          ChatRoom[]         @relation("Participant1")
  participant2          ChatRoom[]         @relation("Participant2")
  me                    Friendship[]       @relation("Me")
  friendship            Friendship[]       @relation("Friend")
  friendshipAddressee   FriendRequest[]    @relation("FriendshipAddressee")
  friendshipRequester   FriendRequest[]    @relation("FriendshipRequester")
  @@map("users")
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  requesterId Int      @map("requester_id")
  addresseeId Int      @map("addressee_id")
  createdAt   DateTime @default(now()) @map("created_at")
  addressee   User     @relation("FriendshipAddressee", fields: [addresseeId], references: [id], onDelete: Cascade)
  requester   User     @relation("FriendshipRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  @@map("friend_request")
}

model Friendship {
  id          Int     @id @default(autoincrement())
  userId      Int     @map("user_id")
  friendId    Int     @map("friend_id")
  user        User    @relation("Me", fields: [userId], references: [id], onDelete: Cascade)
  friend      User    @relation("Friend", fields: [friendId], references: [id], onDelete: Cascade)
  @@map("friendship")
}

model Chat {
  id         Int               @id @default(autoincrement())
  roomId     Int               @map("room_id")
  senderId   Int               @map("sender_id")
  content    String            @db.VarChar(2000)
  createdAt  DateTime          @default(now()) @map("created_at")
  room       ChatRoom          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender     User              @relation(fields: [senderId], references: [id])
  likes      ChatLike[]
  
  @@map("chats")
}

model ChatRoom {
  id                Int       @id @default(autoincrement())
  participant1Id    Int       @map("participant_1")
  participant2Id    Int       @map("participant_2")
  participant1      User      @relation("Participant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2      User      @relation("Participant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  chat              Chat[]
  @@map("chat_room")
}

model ChatLike {
  id          Int     @id
  chatId      Int     @map("chat_id")
  userId      Int     @map("user_id")
  pressed     Boolean @default(false)
  chat        Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("chat_likes")
}
